using MahApps.Metro.Controls;
using MahApps.Metro.Converters;

mixin MetroToggleButtonStyleWithColor(
  a1="{DynamicResource AccentColorBrush}",
  a2="{DynamicResource AccentColorBrush2}",
  a3="{DynamicResource AccentColorBrush3}",
  pf="{DynamicResource FlatButtonPressedForegroundBrush}",
  pb="{DynamicResource FlatButtonPressedBackgroundBrush}") for Style
{
  TargetType: ToggleButton
  BasedOn: resource "MetroFlatToggleButton"
  Triggers: [
    Trigger {
      Property: "IsChecked"
      Value: "True"
      Setter { Property: "Background",  Value: $a1 }
      Setter { Property: "Foreground",  Value: $pf }
    }
    MultiTrigger {
      Conditions: [
        Condition { Property: "IsMouseOver",  Value: "True" }
        Condition { Property: "IsChecked",  Value: "False" }
      ]
      Setter { Property: "Background",  Value: "DarkGray" }
    }
    MultiTrigger {
      Conditions: [
        Condition { Property: "IsMouseOver",  Value: "True" }
        Condition { Property: "IsChecked",  Value: "True" }
      ]
      Setter { Property: "Background",  Value: $a2 }
      Setter { Property: "Foreground",  Value: $pf }
    }
    MultiTrigger {
      Conditions: [
        Condition { Property: "IsPressed",  Value: "True" }
        Condition { Property: "IsChecked",  Value: "False" }
      ]
      Setter { Property: "Background",  Value: $pb }
      Setter { Property: "Foreground",  Value: $pf }
    }
    MultiTrigger {
      Conditions: [
        Condition { Property: "IsPressed",  Value: "True" }
        Condition { Property: "IsChecked",  Value: "True" }
      ]
      Setter { Property: "Background",  Value: $a3 }
      Setter { Property: "Foreground",  Value: $pf }
    }
    Trigger {
      Property: "IsEnabled"
      Value: "False"
      Setter { Property: "Foreground",  Value: "{DynamicResource GrayBrush2}" }
    }
  ]
}

ResourceDictionary {
  Color Key="RoleAccentColor1"{ "#CCFA6800" }
  Color Key="RoleAccentColor2"{ "#99FA6800" }
  Color Key="RoleAccentColor3"{ "#66FA6800" }
  SolidColorBrush Key="RoleAccentBrush1"{ Color: resource "RoleAccentColor1" }
  SolidColorBrush Key="RoleAccentBrush2"{ Color: resource "RoleAccentColor2" }
  SolidColorBrush Key="RoleAccentBrush3"{ Color: resource "RoleAccentColor3" }
  Color Key="PermissionAccentColor1"{ "#CCD80073" }
  Color Key="PermissionAccentColor2"{ "#99D80073" }
  Color Key="PermissionAccentColor3"{ "#66D80073" }
  SolidColorBrush Key="PermissionAccentBrush1"{ Color: resource "PermissionAccentColor1" }
  SolidColorBrush Key="PermissionAccentBrush2"{ Color: resource "PermissionAccentColor2" }
  SolidColorBrush Key="PermissionAccentBrush3"{ Color: resource "PermissionAccentColor3" }
  Style Key="MetroToggleButtonRole"
  {
    #MetroToggleButtonStyleWithColor(
      resource "RoleAccentBrush1",
      resource "RoleAccentBrush2",
      resource "RoleAccentBrush3"
    )
  }
  Style Key="MetroToggleButtonPermission"
  {
    #MetroToggleButtonStyleWithColor(
      resource "PermissionAccentBrush1",
      resource "PermissionAccentBrush2",
      resource "PermissionAccentBrush3"
    )
  }
  Style Key="SearchTextBox"
  {
    "xmlns:Controls": "http://metro.mahapps.com/winfx/xaml/controls"
    BasedOn: resource "SearchMetroTextBox"
    TargetType: TextBox
    Triggers: [
      Trigger {
        Property: "Controls:TextBoxHelper.HasText"
        Value: true
        #Setter("Controls:TextBoxHelper.ButtonContent", "r")
        #Setter("Controls:TextBoxHelper.ButtonContentTemplate", null)
      }
    ]
  }
}