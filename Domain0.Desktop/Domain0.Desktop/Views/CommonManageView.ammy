using MahApps.Metro.IconPacks;
using MahApps.Metro.Controls;
using Domain0.Desktop.Views.Converters;
using Domain0.Desktop.Views;


alias ManageDataGrid(selectionMode="Single")
{
  DataGrid
  {
    Resources: [
      BindingProxy Key="Proxy" { Data: bind }
      Style {
        //"xmlns:Controls": "clr-namespace:MahApps.Metro.Controls"
        TargetType: DataGridColumnHeader
        Setter { Property: "Background",  Value: "{DynamicResource WhiteBrush}" }
        Setter { Property: "BorderBrush",  Value: "{DynamicResource GrayBrush5}" }
        Setter { Property: "BorderThickness",  Value: "0 0 0 3" }
        //Setter { Property: "Controls:ControlsHelper.ContentCharacterCasing",  Value: "Upper" }
        Setter { Property: "Cursor",  Value: "Hand" }
        Setter { Property: "FontWeight",  Value: "SemiBold" }
        Setter { Property: "Foreground",  Value: "{DynamicResource BlackBrush}" }
        Setter { Property: "HorizontalContentAlignment",  Value: "Left" }
        Setter { Property: "Margin",  Value: "0" }
        Setter { Property: "MinHeight",  Value: "25" }
        Setter { Property: "MinWidth",  Value: "0" }
        Setter { Property: "Padding",  Value: "10 4 4 7" }
        Setter { Property: "SnapsToDevicePixels",  Value: "True" }
        Setter {
          Property: "Template"
          Value: ControlTemplate {
            TargetType: DataGridColumnHeader
            Grid {
              #TwoRows("*", "Auto")
              #TwoColumns("*", "Auto")
              Border "BackgroundBorder" {
                #Cell(0, 0, 2, 2)
                Background: "{TemplateBinding Background}"
                BorderBrush: "{TemplateBinding BorderBrush}"
                BorderThickness: "{TemplateBinding BorderThickness}"
              }
              ContentControlEx "HeaderContent" {
                #Cell(0, 0)
                Padding: "{TemplateBinding Padding}"
                HorizontalContentAlignment: "{TemplateBinding HorizontalContentAlignment}"
                VerticalContentAlignment: "{TemplateBinding VerticalContentAlignment}"
                Content: "{TemplateBinding Content}"
                //ContentCharacterCasing: "{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}"
                ContentStringFormat: "{TemplateBinding ContentStringFormat}"
                ContentTemplate: "{TemplateBinding ContentTemplate}"
                ContentTemplateSelector: "{TemplateBinding ContentTemplateSelector}"
                RecognizesAccessKey: "True"
                SnapsToDevicePixels: "{TemplateBinding SnapsToDevicePixels}"
              }
              Path "SortArrow" {
                #Cell(0, 1)
                Width: "8"
                Height: "10"
                Margin: "0 0 8 2"
                VerticalAlignment: "Center"
                Fill: "{DynamicResource GrayBrush2}"
                RenderTransformOrigin: "0.5,0.5"
                Stretch: "Fill"
                Visibility: "Collapsed"
              }
              Border 
              {
                #Cell(1, 0, 1, 2)
                BorderBrush: "{TemplateBinding BorderBrush}"
                BorderThickness: "0 1 0 0"
                TextBox "HeaderSearchBox"
                {
                    TextBox.InputBindings: [
                      KeyBinding
                      {
                        Key:"Return"
                        Command: bind Data.UpdateFilters from $resource Proxy
                        CommandParameter: MultiBinding {
                          Converter: DataGridFilterByPropertyConverter {}
                          Binding {
                            RelativeSource: "{RelativeSource FindAncestor, AncestorType=DataGrid}"
                          }
                          Binding {
                            RelativeSource: "{RelativeSource TemplatedParent}"
                            Path: "TabIndex"
                          }
                          Binding {
                            RelativeSource: "{RelativeSource FindAncestor, AncestorType=TextBox}"
                            Path: "Text"
                          }
                        }
                      }
                    ]
                }
              }
              Thumb "PART_LeftHeaderGripper" {
                #Cell(0, 0, 2, 1)
                HorizontalAlignment: "Left"
                Background: "Transparent"
                Style: "{StaticResource MetroColumnHeaderGripperStyle}"
              }
              Thumb "PART_RightHeaderGripper" {
                #Cell(0, 1, 2, 1)
                HorizontalAlignment: "Right"
                Style: "{StaticResource MetroColumnHeaderGripperStyle}"
              }
            }
            Triggers: [
              Trigger {
                Property: "SortDirection"
                Value: "Ascending"
                Setter {
                  TargetName: "SortArrow"
                  Property: "Data"
                  Value: "F1 M 34,57L 42,57L 42,32.25L 52,42.25L 52,31.75L 38,17.75L 24,31.75L 24,42.25L 34,32.25L 34,57 Z "
                }
                Setter {
                  TargetName: "SortArrow"
                  Property: "Visibility"
                  Value: "Visible"
                }
              }
              Trigger {
                Property: "SortDirection"
                Value: "Descending"
                Setter {
                  TargetName: "SortArrow"
                  Property: "Data"
                  Value: "F1 M 42,19.0002L 34,19.0002L 34,43.7502L 24,33.7502L 24,44.2502L 38,58.2502L 52,44.2502L 52,33.7502L 42,43.7502L 42,19.0002 Z "
                }
                Setter {
                  TargetName: "SortArrow"
                  Property: "Margin"
                  Value: "0 0 8 0"
                }
                Setter {
                  TargetName: "SortArrow"
                  Property: "Visibility"
                  Value: "Visible"
                }
              }
              Trigger {
                Property: "DisplayIndex"
                Value: "0"
                Setter {
                  TargetName: "PART_LeftHeaderGripper"
                  Property: "Visibility"
                  Value: "Collapsed"
                }
              }
            ]
          }
        }
        Setter { Property: "VerticalContentAlignment",  Value: "Center" }
        Triggers: [
          MultiTrigger {
            Conditions: [
              Condition { Property: "IsMouseOver",  Value: "True" }
              Condition { Property: "SortDirection",  Value: "{x:Null}" }
            ]
            Setter { Property: "Background",  Value: "{DynamicResource GrayBrush8}" }
          }
          Trigger {
            Property: "IsEnabled"
            Value: "False"
            Setter { Property: "Foreground",  Value: "{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" }
          }
        ]
      }
    ]

    Name: "ManageDataGrid"
    VirtualizingPanel.IsVirtualizing: true
    VirtualizingPanel.VirtualizationMode: "Recycling"
    SelectionMode: $selectionMode
    IsReadOnly: true
    ItemsSource: bind Items
    AutoGenerateColumns: false
    SelectedItem: bind SelectedItem
    combine Columns: [
      DataGridTextColumn
      {
        Header: "Id"
        Binding: bind Id
        Width: Auto
        SortDirection: "Ascending"
      }
    ]
  }
}

alias ManageRoundButton(kind, tt)
{
  Button
  {
    Margin: 5
    Width: 32
    Height: 32
    ToolTip: $tt
    Style: resource dyn "MahApps.Metro.Styles.MetroCircleButtonStyle"
    PackIconModern
    {
      Kind: $kind
      Height: 16
      Width: 16
    }
  }
}

alias ManageRoundToggleButton(kind, tt)
{
  ToggleButtonEx
  {
    Margin: 5
    Width: 32
    Height: 32
    ToolTip: $tt
    Style: resource dyn "MahApps.Metro.Styles.MetroCircleToggleButtonStyle"
    PackIconModern
    {
      Kind: $kind
      Height: 16
      Width: 16
    }
  }
}

alias ManageButtons()
{
  Grid
  {
    #ThreeColumns("Auto", "Auto", "Auto")
    @ManageRoundToggleButton("Add", "Add new")
    {
      Grid.Column: 0
      Command: bind OpenCreateFlyoutCommand
      IsChecked: bind IsCreateFlyoutOpen
    }
    @ManageRoundToggleButton("Edit", "Edit selected")
    {
      Grid.Column: 1
      Command: bind OpenEditFlyoutCommand
      IsChecked: bind IsEditFlyoutOpen
    }
    @ManageRoundButton("Delete", "Remove selected")
    {
      Grid.Column: 2
      Command: bind DeleteSelectedCommand
    }
  }
}

alias FlyoutCreate(header = "Add")
{
  Flyout "FlyoutCreate"
  {
    IsOpen: bind IsCreateFlyoutOpen
    Position: Right
    Width: 300
    Theme: "Adapt"
    Header: $header
  }
}

alias FlyoutEdit(header = "Edit")
{
  Flyout "FlyoutEdit"
  {
    IsOpen: bind IsEditFlyoutOpen
    Position: Right
    Width: 300
    Theme: "Adapt"
    Header: $header
  }
}

alias EditTextBox(watermark, clearButton=true)
{
  TextBox
  {
    Margin: "5 5 5 0"
    TextBoxHelper.Watermark: $watermark
    TextBoxHelper.UseFloatingWatermark: true
    TextBoxHelper.ClearTextButton: $clearButton
  }
}

alias EditTextBoxWrap(watermark)
{
  TextBox
  {
    Margin: "5 5 5 0"
    TextBoxHelper.Watermark: $watermark
    TextBoxHelper.UseFloatingWatermark: true
    TextWrapping: Wrap
    MaxHeight: 100
  }
}

alias EditComboBox(watermark)
{
  ComboBox
  {
    Margin: "5 5 5 0"
    TextBoxHelper.Watermark: $watermark
    TextBoxHelper.UseFloatingWatermark: true
  }
}
alias EditCheckBox()
{
  CheckBox
  {
    Margin: "5 5 5 0"
  }
}

alias EditButton(command = "{Binding EditSelectedCommand}")
{
  Button
  {
    Margin: "5 15 5 0"
    Command: $command
    Content: "Apply"
  }
}

alias CreateButton(command = "{Binding CreateCommand}")
{
  Button
  {
    Margin: "5 15 5 0"
    Command: $command
    Content: "Create"
  }
}

alias LabelTag(color, binding, fontSize=12, fontColor="White")
{
  Border 
  {
    Padding: "5, 1, 5, 2"
    Background: $color
    CornerRadius: 5
    TextBlock
    {
      VerticalAlignment: Center
      HorizontalAlignment: Center
      FontSize: $fontSize
      Foreground: $fontColor
      Text: $binding
    } 
  }
}

alias FilterTextBox(name, command)
{
  TextBox
  {
    Name: $name
    Style: resource "SearchTextBox"
    TextBoxHelper.ClearTextButton: true
    TextBoxHelper.Watermark: "Search..."
    TextBoxHelper.ButtonCommand: $command
    TextBoxHelper.ButtonCommandParameter: Binding { Path: "Text", ElementName: $name }
    InputBindings: [
      KeyBinding {
        Key: Return
        Command: $command
        CommandParameter: Binding { Path: "Text", ElementName: $name }
      }
    ]  
  }
}

alias NonFocusableListBox()
{
  ListBox
  {
    Resources: [
      Style {
        TargetType: ListBoxItem
        BasedOn: resource "{x:Type ListBoxItem}"
        #Setter("Focusable", false)
      }
    ]
  }
}

alias ManageItemDataTemplate(commandBinding, toggleStyle)
{
  DataTemplate
  {
    Grid 
    {
      ToggleButtonEx
      {
        HorizontalContentAlignment: Left
        Content: bind Item.Name
        IsChecked: bind IsSelected set [ Mode: OneWay ]
        Command: $commandBinding
        CommandParameter: bind
        Opacity: bind Percent set [ Mode: OneWay ]
        Style: $toggleStyle
      }
      @LabelTag(Gray, bind AmountString, 8)
      {
        VerticalAlignment: Center
        HorizontalAlignment: Right
        Visibility: bind AmountString
                    convert (string val) =>
                        string.IsNullOrEmpty(val)
                            ? Visibility.Collapsed
                            : Visibility.Visible
      }
    }
  }
}

alias ManageSidePanelHeader(name, itemsChanged, applyCmd, resetCmd)
{
  Grid 
  {
    #TwoColumns("*", "Auto")
    TextBlock 
    {
      Grid.Column: 0
      Margin: "5,0,0,0"
      VerticalAlignment: Center
      Text: $name
      FontSize: 20
    }
    @StackPanelHorizontal() 
    {
      Grid.Column: 1
      @CircleButton("Check") 
      {
        Margin: "0,0,5,0"
        Command: $applyCmd
      }
      @CircleButton("RefreshClockwiseUp") 
      {
        Margin: "0,0,5,0"
        Command: $resetCmd
      }
      Style: Style {
        TargetType: StackPanel
        #Fade_OnBinding($itemsChanged, true)
      }
    }
  }
}

alias CircleButton(icon) {
  Button
  {
    Width: 32
    Height: 32
    Style: resource dyn "MahApps.Metro.Styles.MetroCircleButtonStyle"
    PackIconModern
    {
      Kind: $icon
      Height: 16
      Width: 16
    }
  }
}

alias CircleButtonMini(icon) {
  Button
  {
    Width: 24
    Height: 24
    Style: resource dyn "MahApps.Metro.Styles.MetroCircleButtonStyle"
    PackIconModern
    {
      Kind: $icon
      Height: 12
      Width: 12
    }
  }
}