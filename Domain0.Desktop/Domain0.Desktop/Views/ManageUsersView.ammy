using Domain0.Desktop.Views;
using Domain0.Desktop.ViewModels;
using MahApps.Metro.Controls;
using MahApps.Metro.IconPacks;

ViewUserControl "Domain0.Desktop.Views.ManageUsersView" {

  Resources: [
    BindingProxy Key="Proxy" { Data: bind }
  ]

  Grid
  {
    Grid 
    {
      #TwoRows("Auto")
      #TwoColumns("*", "300")
      @StackPanelHorizontal()
      {
        Grid.Row: 0
        @ManageButtons() {}
        @ManageRoundButton("Lock", "Toggle Lock")
        {
          Margin: "30,0,0,0"
          Command: bind LockUsersCommand
          CommandParameter: Binding {
            ElementName: "ManageDataGrid"
            Path: "SelectedItems"
          }
        }
      }
      @ManageDataGrid("Extended")
      {
        Grid.Row: 1
        SelectionChanged: "OnUsersSelectionChanged"
        combine Columns: [
          DataGridTextColumn
          {
            Header: "🔒"
            SortMemberPath: "IsLocked"
            Binding: bind IsLocked convert (bool val) => val ? "🔒" : ""
            Width: Auto
          }
          DataGridTextColumn
          {
            Header: "Name"
            Binding: bind Name
            Width: Auto
          }
          DataGridTextColumn
          {
            Header: "Phone"
            Binding: bind Phone
            Width: Auto
          }
          DataGridTextColumn
          {
            Header: "Email"
            Binding: bind Email
            Width: Auto
          }
          DataGridTextColumn
          {
            Header: "Description"
            Binding: bind Description
            Width: Auto
          }
        ]
      }
      Grid 
      {
        #Cell(0, 1, 2, 1)
        #TwoRows()
        
        Grid 
        {
          Grid.Row:0
          #ThreeRows("35", "Auto", "*")
          @ManageSidePanelHeader("Roles", bind IsChangedRoles, bind ApplyRolesCommand, bind ResetRolesCommand) 
          {
            Grid.Row: 0
          }
          @FilterTextBox("RolesFilter", bind RolesFilterCommand set [ Mode: OneWay ])
          {
            Grid.Row: 1
            Margin: 5
          }
          @NonFocusableListBox()
          {
            Grid.Row: 2
            ItemsSource: bind SelectedUserRoles
            ItemTemplate: @ManageItemDataTemplate(bind Data.RoleCheckedCommand from $resource Proxy, resource "MetroToggleButtonRole") {}
          }
        }

        Grid 
        {
          Grid.Row:1
          #ThreeRows("35", "Auto", "*")
          Margin: "0,5,0,0"
          @ManageSidePanelHeader("Permissions", bind IsChangedPermissions, bind ApplyPermissionsCommand, bind ResetPermissionsCommand) 
          {
            Grid.Row: 0
          }
          @FilterTextBox("PermissionsFilter", bind PermissionsFilterCommand set [ Mode: OneWay ])
          {
            Grid.Row: 1
            Margin: 5
          }
          @NonFocusableListBox()
          {
            Grid.Row: 2
            ItemsSource: bind SelectedItemPermissions
            ItemTemplate: @ManageItemDataTemplate(bind Data.PermissionCheckedCommand from $resource Proxy, resource "MetroToggleButtonPermission") {}
          }
        }

      }
    }

    FlyoutsControl
    {
      @FlyoutCreate("Add User")
      {
        Grid
        {
          #FourRows("Auto", "Auto", "*", "Auto")
          MetroTabControl 
          {
            Grid.Row: 0
            TabControlHelper.Underlined: TabPanel
            TabStripPlacement: Top
            SelectedIndex: bind ForceCreateUserMode
            MetroTabItem 
            {
              ControlsHelper.HeaderFontSize: 18
              Header: "Phone"
      
              StackPanel
              {
                @EditTextBox("Phone")
                {
                  Text: bind Phone
                }
                @EditTextBox("Name")
                {
                  Text: bind Name
                }
                CheckBox "CheckBox_BlockSmsSend"
                {
                  Margin: "5 15 5 5"
                  IsChecked: bind BlockSmsSend
                  "Block Sms Send"
                }
                StackPanel
                {
                  Visibility: bind IsChecked from "CheckBox_BlockSmsSend"
                              convert (bool val) => val ? Visibility.Collapsed : Visibility.Visible
                  @EditComboBox("Locale") 
                  {
                    ItemsSource: bind ForceCreateUserLocales
                    SelectedItem: bind ForceCreateUserLocale
                  }
                  @EditTextBoxWrap("Custom Sms Template")
                  {
                    Text: bind CustomSmsTemplate
                    MaxHeight: 100
                  }
                }
              }
            }
            MetroTabItem 
            {
              Header: "Email"
              ControlsHelper.HeaderFontSize: 18
      
              StackPanel
              {
                @EditTextBox("Email")
                {
                  Text: bind Email
                }
                @EditTextBox("Name")
                {
                  Text: bind Name
                }
                CheckBox "CheckBox_BlockEmailSend"
                {
                  Margin: "5 15 5 5"
                  IsChecked: bind BlockEmailSend
                  "Block Email Send"
                }

                StackPanel 
                {
                  Visibility: bind IsChecked from "CheckBox_BlockEmailSend"
                            convert (bool val) => val ? Visibility.Collapsed : Visibility.Visible
                  @EditComboBox("Locale") 
                  {
                    ItemsSource: bind ForceCreateUserLocales
                    SelectedItem: bind ForceCreateUserLocale
                  }
                  @EditTextBoxWrap("Custom Email Subject Template")
                  {
                    Text: bind CustomEmailSubjectTemplates
                    MaxHeight: 100
                  }
                  @EditTextBoxWrap("Custom Email Template")
                  {
                    Text: bind CustomEmailTemplate
                    MaxHeight: 100
                  }
                }
              }
            }
          }
          
          StackPanel 
          {
            Grid.Row: 1
            Margin: "0,5,0,0"
            Separator { Margin: 5 }
            @EditTextBox("Environment Token")
            {
              TextBoxHelper.IsWaitingForData: true
              Text: bind EnvironmentToken
            }  
          }

          MetroHeader 
          {
            Grid.Row: 2
            Margin: "10,10,10,0"
            Header: "Roles"

            Grid 
            {
              #TwoRows("Auto", "*")
              @FilterTextBox("ForceCreateUserRolesFilter", bind ForceCreateUserRolesFilterCommand set [ Mode: OneWay ])
              {
                Grid.Row: 0
                Margin: 5
              }
              @NonFocusableListBox()
              {
                Grid.Row: 1
                ItemsSource: bind ForceCreateUserRoles
                ItemTemplate: DataTemplate {
                  ToggleButton
                  {
                    Content: bind Role.Name
                    IsChecked: bind IsSelected
                    Style: resource "MetroToggleButtonRole"
                  }
                }
              }
            }
          }

          @CreateButton()
          {
            Grid.Row: 3
          }
        }
      }
  
      @FlyoutEdit() 
      {
        StackPanel
        {
          @EditTextBox("Name")
          {
            Text: bind EditViewModel.Name
          }
          Grid 
          {
            #TwoColumns("*", "Auto")
            @EditTextBox("Phone", false)
            {
              Grid.Column: 0
              IsReadOnly: true
              Text: bind EditViewModel.Phone
            }
            @CircleButtonMini("Edit") 
            {
              Grid.Column: 1
              Margin: "0,5,5,0"
              Command: bind ForceChangePhoneCommand
            }
          }
          Grid 
          {
            #TwoColumns("*", "Auto")
            @EditTextBox("Email", false)
            {
              Grid.Column: 0
              IsReadOnly: true
              Text: bind EditViewModel.Email
            }
            @CircleButtonMini("Edit") 
            {
              Grid.Column: 1
              Margin: "0,5,5,0"
              Command: bind ForceChangeEmailCommand
            }
          }
          @EditTextBoxWrap("Description")
          {
            Text: bind EditViewModel.Description
          }
          @EditButton() {}
        }
      }
    }
  }

}