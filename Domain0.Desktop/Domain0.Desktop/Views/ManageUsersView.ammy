using Domain0.Desktop.Views;
using Domain0.Desktop.ViewModels;
using MahApps.Metro.Controls;
using MahApps.Metro.IconPacks;

ViewUserControl "Domain0.Desktop.Views.ManageUsersView" {

  Resources: [
    BindingProxy Key="Proxy" { Data: bind }
  ]

  Grid
  {
    Grid 
    {
      #TwoRows("Auto")
      #TwoColumns("*", "300")
      @StackPanelHorizontal()
      {
        Grid.Row: 0
        @ManageButtons() {}
        @ManageRoundButton("Lock", "Toggle Lock")
        {
          Margin: "30,0,0,0"
          Command: bind LockUsersCommand
          CommandParameter: Binding {
            ElementName: "ManageUsersDataGrid"
            Path: "SelectedItems"
          }
        }
      }
      @ManageDataGrid("Extended")
      {
        Grid.Row: 1
        Name: "ManageUsersDataGrid"
        SelectionChanged: "OnUsersSelectionChanged"
        combine Columns: [
          DataGridTextColumn
          {
            Header: "🔒"
            SortMemberPath: "IsLocked"
            Binding: bind IsLocked convert (bool val) => val ? "🔒" : ""
            Width: Auto
          }
          DataGridTextColumn
          {
            Header: "Name"
            Binding: bind Name
            Width: Auto
          }
          DataGridTextColumn
          {
            Header: "Phone"
            Binding: bind Phone
            Width: Auto
          }
          DataGridTextColumn
          {
            Header: "Email"
            Binding: bind Email
            Width: Auto
          }
          DataGridTextColumn
          {
            Header: "Description"
            Binding: bind Description
            Width: Auto
          }
        ]
      }
      Grid 
      {
        #Cell(0, 1, 2, 1)
        #TwoRows()
        


        @ManageItemsSubset("Roles", Colors.DarkOrange,
          bind Name, bind Roles,
          bind Data.AddRoleCommand from $resource Proxy,
          bind RemoveRolesCommand,
          "RolesList",
          bind SelectedUserRoles set [ Mode: OneWay ])
        {
          Grid.Row: 0
        }

        @ManageItemsSubset("Permissions", Colors.DarkRed,
          bind Name, bind Permissions,
          bind Data.AddPermissionCommand from $resource Proxy,
          bind RemovePermissionsCommand,
          "PermissionsList",
          bind SelectedUserPermissions set [ Mode: OneWay ])
        {
          Grid.Row: 1
        }


      }
    }

    FlyoutsControl
    {
      @FlyoutCreate("Add User")
      {
        Grid
        {
          #ThreeRows("Auto", "*", "Auto")
          MetroTabControl 
          {
            Grid.Row: 0
            TabControlHelper.Underlined: TabPanel
            TabStripPlacement: Top
            SelectedIndex: bind ForceCreateUserMode
            MetroTabItem 
            {
              ControlsHelper.HeaderFontSize: 18
              Header: "Phone"
      
              StackPanel
              {
                TextBox
                {
                  Margin: "5 5 5 0"
                  TextBoxHelper.Watermark: "Phone"
                  Text: bind Phone
                }
                TextBox 
                {
                  Margin: "5 5 5 0"
                  TextBoxHelper.Watermark: "Name"
                  Text: bind Name
                }
                CheckBox "CheckBox_BlockSmsSend"
                {
                  Margin: "5 15 5 5"
                  IsChecked: bind BlockSmsSend
                  "Block Sms Send"
                }
                StackPanel
                {
                  Visibility: bind BlockSmsSend convert (bool val) => val ? Visibility.Collapsed : Visibility.Visible
                  TextBox 
                  {
                    Margin: "5 5 5 0"
                    TextBoxHelper.Watermark: "Custom Sms Template"
                    Text: bind CustomSmsTemplate
                    TextWrapping: Wrap
                  }
                }
              }
            }
            MetroTabItem 
            {
              Header: "Email"
              ControlsHelper.HeaderFontSize: 18
      
              StackPanel
              {
                TextBox
                {
                  Margin: "5 5 5 0"
                  TextBoxHelper.Watermark: "Email"
                  Text: bind Email
                }
                TextBox 
                {
                  Margin: "5 5 5 0"
                  TextBoxHelper.Watermark: "Name"
                  Text: bind Name
                }
                CheckBox
                {
                  Margin: "5 15 5 5"
                  IsChecked: bind BlockEmailSend
                  "Block Email Send"
                }
                StackPanel
                {
                  Visibility: bind BlockEmailSend convert (bool val) => val ? Visibility.Collapsed : Visibility.Visible
                  TextBox 
                  {
                    Margin: "5 5 5 0"
                    TextBoxHelper.Watermark: "Custom Email Subject Template"
                    Text: bind CustomEmailSubjectTemplate
                    TextWrapping: Wrap
                  }
                  TextBox 
                  {
                    Margin: "5 5 5 0"
                    TextBoxHelper.Watermark: "Custom Email Template"
                    Text: bind CustomEmailTemplate
                    TextWrapping: Wrap
                  }
                }
              }
            }
          }

          MetroHeader 
          {
            Margin: "10,10,10,0"
            Grid.Row: 1
            Header: "Roles"
            Grid 
            {
              #TwoRows("Auto", "*")
              TextBox "RolesFilter"
              {
                Grid.Row: 0
                Margin: 5
                TextBoxHelper.ClearTextButton: true
                TextBoxHelper.Watermark: "Search..."
                ToolTip: "Roles filter"
                TextBoxHelper.ButtonCommand: bind ForceCreateUserRolesFilterCommand set [ Mode: OneWay ]
                TextBoxHelper.ButtonCommandParameter: bind Text from "RolesFilter"
                InputBindings: [
                  KeyBinding {
                    Key: Return
                    Command: bind ForceCreateUserRolesFilterCommand set [ Mode: OneWay ]
                    CommandParameter: bind Text from "RolesFilter"
                  }
                ]
                Style: Style {
                  "xmlns:Controls": "http://metro.mahapps.com/winfx/xaml/controls"
                  BasedOn: resource "SearchMetroTextBox"
                  TargetType: TextBox
                  Triggers: [
                    Trigger {
                      Property: "Controls:TextBoxHelper.HasText"
                      Value: true
                      #Setter("Controls:TextBoxHelper.ButtonContent", "r")
                      #Setter("Controls:TextBoxHelper.ButtonContentTemplate", null)
                    }
                  ]
                }
              }
              ListBox 
              {
                Grid.Row: 1
                Resources: [
                  Style {
                    TargetType: ListBoxItem
                    BasedOn: resource "{x:Type ListBoxItem}"
                    #Setter("Focusable", false)
                  }
                ]
                ItemsSource: bind ForceCreateUserRoles
                ItemTemplate: DataTemplate {
                  ToggleButton
                  {
                    Content: bind Role.Name
                    IsChecked: bind IsSelected
                    Style: resource "MetroToggleButtonRole"
                  }
                }
              }
            }
            
          }

          @CreateButton(bind ForceCreateUserCommand)
          {
            Grid.Row: 2
          }
        }
      }
  
      @FlyoutEdit() 
      {
        StackPanel
        {
          @EditTextBox("Name")
          {
            Text: bind EditViewModel.Name
          }
          @EditTextBox("Phone")
          {
            Text: bind EditViewModel.Phone
          }
          @EditTextBox("Email")
          {
            Text: bind EditViewModel.Email
          }
          @EditTextBoxWrap("Description")
          {
            Text: bind EditViewModel.Description
          }
          @EditButton() {}
        }
      }
    }
  }

}