using MahApps.Metro.Behaviours;
using MahApps.Metro.Controls;
using MahApps.Metro.Controls.Dialogs;

using Domain0.Desktop.Views.Dialogs;

CustomDialog "Domain0.Desktop.Views.Dialogs.ChangePasswordDialog" {
  Grid {
    Margin: "0 10 0 0"
    RowDefinitions: [
      RowDefinition { Height: "Auto" }
      RowDefinition { Height: "Auto" }
      RowDefinition { Height: "Auto" }
      RowDefinition { Height: "Auto" }
    ]

    PasswordBox "PART_TextBox_PasswordOld" {
      Grid.Row: 0
      Margin: "0 5 0 0"
      PasswordBoxBindingBehavior.Password: bind PasswordOld from $ancestor<ChangePasswordDialog> set [ Mode:TwoWay, UpdateSourceTrigger: PropertyChanged ]
      TextBoxHelper.SelectAllOnFocus: true
      TextBoxHelper.UseFloatingWatermark: true
      TextBoxHelper.Watermark: bind PasswordOldWatermark from $ancestor<ChangePasswordDialog> set [ UpdateSourceTrigger: PropertyChanged ]
      FontSize: resource dyn "DialogMessageFontSize"
      Foreground: bind Foreground from $ancestor<ChangePasswordDialog> set [ UpdateSourceTrigger: PropertyChanged ]
    }
    PasswordBox "PART_TextBox_PasswordNew" {
      Grid.Row: 1
      Margin: "0 5 0 0"
      PasswordBoxBindingBehavior.Password: bind PasswordNew from $ancestor<ChangePasswordDialog> set [ Mode:TwoWay, UpdateSourceTrigger: PropertyChanged ]
      TextBoxHelper.SelectAllOnFocus: true
      TextBoxHelper.UseFloatingWatermark: true
      TextBoxHelper.Watermark: bind PasswordNewWatermark from $ancestor<ChangePasswordDialog> set [ UpdateSourceTrigger: PropertyChanged ]
      FontSize: resource dyn "DialogMessageFontSize"
      Foreground: bind Foreground from $ancestor<ChangePasswordDialog> set [ UpdateSourceTrigger: PropertyChanged ]
    }
    PasswordBox "PART_TextBox_PasswordNewRepeat" {
      Grid.Row: 2
      Margin: "0 5 0 0"
      PasswordBoxBindingBehavior.Password: bind PasswordNewRepeat from $ancestor<ChangePasswordDialog>
                                           set [
                                             Mode: TwoWay
                                             ValidatesOnDataErrors: true
                                             NotifyOnValidationError: true
                                             ValidatesOnNotifyDataErrors: true
                                             UpdateSourceTrigger: PropertyChanged
                                           ]
      TextBoxHelper.SelectAllOnFocus: true
      TextBoxHelper.UseFloatingWatermark: true
      TextBoxHelper.Watermark: bind PasswordNewRepeatWatermark from $ancestor<ChangePasswordDialog> set [ UpdateSourceTrigger: PropertyChanged ]
      FontSize: resource dyn "DialogMessageFontSize"
      Foreground: bind Foreground from $ancestor<ChangePasswordDialog> set [ UpdateSourceTrigger: PropertyChanged ]
    }
    StackPanel {
      Grid.Row: 3
      Height: 85
      HorizontalAlignment: Right
      Orientation: Horizontal
      Button "PART_AffirmativeButton" {
        Height: 35
        MinWidth: 80
        Margin: "0 0 5 0"
        Content: bind AffirmativeButtonText from $ancestor<ChangePasswordDialog> set [ UpdateSourceTrigger: PropertyChanged ]
        IsEnabled: bind IsValid from $ancestor<ChangePasswordDialog> set [ UpdateSourceTrigger: PropertyChanged ]
        Style: resource dyn "AccentedDialogSquareButton"
      }
      Button "PART_NegativeButton" {
        Height: 35
        MinWidth: 80
        Margin: "5 0 5 0"
        Content: bind NegativeButtonText from $ancestor<ChangePasswordDialog> set [ UpdateSourceTrigger: PropertyChanged ]
      }
    }
  }
}

